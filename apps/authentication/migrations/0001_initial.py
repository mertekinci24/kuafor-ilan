# Generated by Django 4.2.8 on 2025-06-27 23:16

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='E-posta')),
                ('phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Telefon numarası +905551234567 formatında olmalıdır.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefon')),
                ('is_phone_verified', models.BooleanField(default=False, verbose_name='Telefon Doğrulandı mı?')),
                ('user_type', models.CharField(choices=[('jobseeker', 'İş Arayan'), ('business', 'İş Veren'), ('admin', 'Yönetici')], default='jobseeker', max_length=20, verbose_name='Kullanıcı Tipi')),
                ('current_plan', models.CharField(choices=[('free', 'Ücretsiz'), ('basic', 'Temel'), ('premium', 'Premium'), ('enterprise', 'Kurumsal')], default='free', max_length=20, verbose_name='Mevcut Plan')),
                ('plan_start_date', models.DateTimeField(blank=True, null=True)),
                ('plan_end_date', models.DateTimeField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False, verbose_name='Doğrulanmış')),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('profile_views', models.PositiveIntegerField(default=0)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Kullanıcı',
                'verbose_name_plural': 'Kullanıcılar',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='OTPVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('otp_code', models.CharField(max_length=6)),
                ('otp_type', models.CharField(choices=[('login', 'Giriş'), ('register', 'Kayıt'), ('password_reset', 'Şifre Sıfırlama'), ('phone_verify', 'Telefon Doğrulama'), ('email_verify', 'Email Doğrulama')], max_length=20)),
                ('delivery_method', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email')], max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_used', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('max_attempts', models.PositiveIntegerField(default=3)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTP Doğrulama',
                'verbose_name_plural': 'OTP Doğrulamalar',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoginHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('is_successful', models.BooleanField(default=True)),
                ('login_method', models.CharField(choices=[('password', 'Şifre'), ('otp_sms', 'OTP SMS'), ('otp_email', 'OTP Email'), ('google', 'Google'), ('linkedin', 'LinkedIn')], default='password', max_length=20)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('device_info', models.CharField(blank=True, max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Giriş Geçmişi',
                'verbose_name_plural': 'Giriş Geçmişi',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SocialAuthProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('google', 'Google'), ('linkedin', 'LinkedIn'), ('facebook', 'Facebook'), ('twitter', 'Twitter')], max_length=20)),
                ('provider_id', models.CharField(max_length=100)),
                ('provider_email', models.EmailField(blank=True, max_length=254)),
                ('access_token', models.TextField(blank=True)),
                ('refresh_token', models.TextField(blank=True)),
                ('profile_data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_providers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sosyal Medya Bağlantısı',
                'verbose_name_plural': 'Sosyal Medya Bağlantıları',
                'unique_together': {('user', 'provider')},
            },
        ),
    ]
